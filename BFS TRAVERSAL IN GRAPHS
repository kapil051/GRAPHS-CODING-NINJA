Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2



//*************************************************************************************************************************************************************

#include <iostream>
using namespace std;
#include <queue>


//PRINT THIS GRAPH //IF EDGES IS ZERO IT WILL PRINT // 0 TO N-1//DISCONNECTED GRAPH


//                 0                                                   7                               8

//       1                   2                                                               9                    10

// 3         4                       6

//      5

//WRITE CODE FOR THE DFS TRVERSAL

// void DFS(int **edges,bool *visited,int n,int sv){

//     cout<<sv<<" ";

//     visited[sv]=true;

//     for(int i=0;i<n;i++){

//        if(i==sv) continue;

//        if(visited[i]==true) continue;

//         if(edges[sv][i]==true) DFS(edges,visited,n,i);

//     }



// }

//BFS TRAVERSAL IN GRAPHS

void BFS(int **edges,bool *visited,int n,int sv){

         queue<int> pendingNodes;

         //PUSH SV TO THE QUEUE

           pendingNodes.push(sv);

           //MARK STARTING VERTEX AS TRUE

              visited[sv]=true;

  while(pendingNodes.size()){

        int front=pendingNodes.front();
        
            pendingNodes.pop();

             cout<<front<<" ";

         for(int i=0;i<n;i++){
 
               if(i==front) continue;

               //IF THE NODE IS ALREADY VISITED THAN IT WILL MOVE FOR THE OTHER NODE

               if(visited[i]==true) continue;    



              if(edges[i][front]==true){

                pendingNodes.push(i);

              //MARK THE NODE TRUE IF YOU PUSH INTO QUEUE

                   visited[i]=true;

              } 

  //END OF FOR
         }  


//END OF WHILE
  }


}



//*****************************************************************************************

int main() {
  int n;
  int e;

  cin >> n >> e;

  // 2D ARRAY FORMATION  AND INITIALISE ALL VALUES WITH ZERO

  int **edges = new int *[n];
  for (int i = 0; i < n; i++) {
    edges[i] = new int[n];
    for (int j = 0; j < n; j++) {

      edges[i][j] = 0;
    }
  }

  // MARK EDGES AT ITS POSITION BY 1

  for (int i = 0; i < e; i++) {
    int f;
    int s;
    cin >> f >> s;
    edges[f][s] = 1;
    edges[s][f] = 1;
  }

  //MAKE A VISITED ARRAY TO MARK THE NODE IS VISITED

  bool *visited = new bool[n];

  for (int i = 0; i < n; i++) {
    visited[i] = false;
  }

  //CALL BFS

  for(int i=0;i<n;i++){

    if(visited[i]==false)   BFS(edges, visited, n,i);

  }




}
